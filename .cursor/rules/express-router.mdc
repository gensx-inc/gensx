---
description: 
globs: 
alwaysApply: false
---
# GenSX Platform Router Rules

<rule>
name: express_router_rules
description: Standards for organizing Express.js routes in GenSX Platform

This rule applies to API route organization within the GenSX Platform (`packages/gensx-platform`) to ensure consistent and maintainable route handling.

## Scope

These rules apply specifically to:

- `packages/gensx-platform/src/controllers/*.ts`

## Background

The GenSX Platform uses Express.js for its HTTP API. To maintain consistency and modularity, we follow a specific pattern for organizing routes and controllers.

## Rules

### Route Organization

1. Routes should be organized by feature/domain:
   - Each feature gets its own file in `controllers/`
   - File should be named after the feature (e.g., `workflows.ts`, `users.ts`)
   - Don't use `.controller` or `.router` suffixes

2. Route Registration:
   - Export a single function that returns a configured router
   - Mount all routes at a single base path in `index.ts`
   - Keep route setup contained within the module

3. Route Handlers:
   - Define as standalone functions within the route file
   - Use proper TypeScript types for request/response
   - Handle errors using the global error handler
   - Follow RESTful conventions

### Request/Response Types

1. Request Parameters:
   ```typescript
   interface RouteParams {
     resourceId: string;
   }
   ```

2. Request Body:
   ```typescript
   const RequestSchema = z.object({
     field: z.string()
   });
   type RequestBody = z.infer<typeof RequestSchema>;
   ```

3. Response Types:
   - Use TypeScript types to define response shapes
   - Document response structures

## Examples

Good route module:

```typescript
import { Request, Response, Router } from "express";

// Types and schemas at the top
interface Params { id: string }
const Schema = z.object({...});
type Body = z.infer<typeof Schema>;

// Handler functions
async function listItems(req: Request, res: Response) {
  // Implementation
}

// Single export that sets up and returns the router
export function registerRoutes(): Router {
  const router = Router();
  router.get("/", listItems);
  router.post("/", createItem);
  return router;
}
```

Bad route module:

```typescript
import express from "express";

// Don't create router as a module-level variable
const router = express.Router();

// Don't use inline handlers
router.get("/", (req, res) => {
  // Implementation
});

// Don't export multiple things
export const someHandler = ...;
export { router };
```

### Mounting Routes

Good:
```typescript
// index.ts
app.use("/api/workflows", registerWorkflowRoutes());
```

Bad:
```typescript
// Don't mount subroutes in multiple places
workflowRouter.use("/deployments", deploymentsRouter);
app.use("/api/workflows", workflowRouter);
```

metadata:
  priority: high
  version: 1.0
</rule>
