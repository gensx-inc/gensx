# GenSX Platform Database Rules

<rule>
name: database_rules
description: Standards for database schema, migrations, and queries in GenSX Platform

This rule applies to database schema, migrations, and queries within the GenSX Platform (`packages/gensx-platform`) to ensure consistent and portable database practices.

## Scope

These rules apply specifically to:

- `packages/gensx-platform/src/db/migrations/*.ts`
- `packages/gensx-platform/src/db/schema.ts`
- `packages/gensx-platform/src/db/connection.ts`

## Background

The GenSX Platform uses a database to store workflow definitions, deployments, executions, and schedules. The platform is designed to be database-agnostic, allowing it to work with different SQL databases (PostgreSQL, MySQL, SQLite) without modification.

## Rules

### Schema Design

1. Use database-agnostic types:

   - `varchar(n)` for string columns with appropriate length limits
   - `timestamp` for date/time columns
   - `json` for JSON data (used for workflow schemas)
   - `boolean` for boolean values
   - `integer` or `bigint` for numeric IDs
   - Avoid database-specific types or features

2. ULID columns should:

   - Use `varchar(26)` type
   - Have a comment indicating it's a ULID
   - Be named with an `_id` suffix (e.g., `workflow_id`, `execution_id`)

3. Timestamp columns:

   - Always include `created_at` and `updated_at`
   - Use `timestamp` type
   - Default to `CURRENT_TIMESTAMP`
   - Be `NOT NULL`

4. String columns:

   - Always specify a length limit
   - Use `varchar(255)` for names, labels, versions
   - Use `varchar(1024)` for paths, URLs, longer text
   - Use `text` only for unbounded content

### Migrations

1. Always provide both `up` and `down` migrations
2. Use transactions for multi-table changes
3. Avoid raw SQL unless absolutely necessary
4. Use Kysely's type-safe query builders

### Queries

1. Use Kysely's type-safe query builders
2. Avoid raw SQL
3. Use transactions for multi-table operations
4. Handle database errors appropriately

## Examples

Good schema definition for a workflow table:

```typescript
.addColumn("id", "varchar(26)", (col) =>
  col.primaryKey().notNull()
  // ULID identifier
)
.addColumn("name", "varchar(255)", (col) =>
  col.notNull()
)
.addColumn("created_at", "timestamp", (col) =>
  col.notNull().defaultTo(sql`CURRENT_TIMESTAMP`)
)
```

Bad schema definition:

```typescript
.addColumn("id", "text", (col) =>
  col.primaryKey()
)
.addColumn("name", "text", (col) =>
  col.notNull()
)
.addColumn("created_at", "text")
```

metadata:
  priority: high
  version: 1.0
</rule>
