{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///Users/dereklegenzoff/Source/gensx-mono/gensx/examples/draft-pad/app/api/gensx/route.ts"],"sourcesContent":["import { GenSX } from \"@gensx/client\";\nimport { NextRequest } from \"next/server\";\n\n/**\n * API route that acts as a pure passthrough to GenSX\n * Accepts the same parameters as the GenSX SDK\n *\n * This is designed to work with the useGenSX hook\n */\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { workflowName, org, project, environment, format, ...inputs } = body;\n\n    // Validate required fields\n    if (!workflowName) {\n      return new Response(\n        JSON.stringify({\n          type: \"error\",\n          error: \"workflowName is required\",\n        }) + \"\\n\",\n        {\n          status: 400,\n          headers: { \"Content-Type\": \"application/x-ndjson\" },\n        },\n      );\n    }\n\n    // Get API key from environment (or could accept from Authorization header)\n    const apiKey =\n      process.env.GENSX_API_KEY ||\n      request.headers.get(\"Authorization\")?.replace(\"Bearer \", \"\");\n\n    if (!apiKey) {\n      return new Response(\n        JSON.stringify({\n          type: \"error\",\n          error: \"API key not configured\",\n        }) + \"\\n\",\n        {\n          status: 401,\n          headers: { \"Content-Type\": \"application/x-ndjson\" },\n        },\n      );\n    }\n\n    // Use defaults from environment if not provided in request\n    const finalOrg = org ?? process.env.GENSX_ORG;\n    const finalProject = project ?? process.env.GENSX_PROJECT;\n    const finalEnvironment = environment ?? process.env.GENSX_ENVIRONMENT;\n\n    if (!finalOrg || !finalProject) {\n      return new Response(\n        JSON.stringify({\n          type: \"error\",\n          error:\n            \"org and project are required (either in request or environment)\",\n        }) + \"\\n\",\n        {\n          status: 400,\n          headers: { \"Content-Type\": \"application/x-ndjson\" },\n        },\n      );\n    }\n\n    // Initialize GenSX SDK\n    const baseUrl = process.env.GENSX_BASE_URL || \"https://api.gensx.com\";\n    const gensx = new GenSX({ apiKey, baseUrl });\n\n    // Use runRaw to get the direct response\n    const response = await gensx.runRaw(workflowName, {\n      org: finalOrg,\n      project: finalProject,\n      environment: finalEnvironment,\n      inputs,\n      format: format || \"ndjson\", // Default to ndjson if not specified\n    });\n\n    // Determine content type based on format\n    const responseFormat = (format || \"ndjson\") as \"sse\" | \"ndjson\" | \"json\";\n    const contentType = {\n      sse: \"text/event-stream\",\n      ndjson: \"application/x-ndjson\",\n      json: \"application/json\",\n    }[responseFormat];\n\n    // Return the response directly to the client\n    // This preserves the response format\n    return new Response(response.body, {\n      status: response.status,\n      headers: {\n        \"Content-Type\": contentType,\n        \"Cache-Control\": \"no-cache\",\n        Connection: \"keep-alive\",\n      },\n    });\n  } catch (error) {\n    console.error(\"GenSX proxy error:\", error);\n\n    // Return error as a GenSX error event\n    const errorEvent = {\n      type: \"error\",\n      error: error instanceof Error ? error.message : \"Internal server error\",\n    };\n\n    return new Response(JSON.stringify(errorEvent) + \"\\n\", {\n      status: 500,\n      headers: { \"Content-Type\": \"application/x-ndjson\" },\n    });\n  }\n}\n\nexport async function GET() {\n  return new Response(\n    JSON.stringify(\n      {\n        message: \"GenSX Passthrough API\",\n        description:\n          \"This endpoint accepts the same parameters as the GenSX SDK and passes them through\",\n        usage: {\n          method: \"POST\",\n          body: {\n            workflowName: \"Name of the GenSX workflow to run (required)\",\n            org: \"Organization name (optional if set in environment)\",\n            project: \"Project name (optional if set in environment)\",\n            environment: \"Environment name (optional)\",\n            format:\n              'Response format: \"sse\" | \"ndjson\" | \"json\" (optional, defaults to \"ndjson\")',\n            \"...inputs\": \"Any other fields are passed as workflow inputs\",\n          },\n          example: {\n            workflowName: \"ChatWorkflow\",\n            org: \"my-org\",\n            project: \"my-project\",\n            environment: \"production\",\n            format: \"ndjson\",\n            userMessage: \"Hello, how can you help me?\",\n          },\n        },\n        authentication: {\n          option1: \"Set GENSX_API_KEY environment variable\",\n          option2: \"Pass Authorization header with Bearer token\",\n        },\n        defaults: {\n          GENSX_ORG: \"Default organization if not provided in request\",\n          GENSX_PROJECT: \"Default project if not provided in request\",\n          GENSX_ENVIRONMENT: \"Default environment if not provided in request\",\n          GENSX_BASE_URL: \"GenSX base URL (defaults to https://api.gensx.com)\",\n        },\n      },\n      null,\n      2,\n    ),\n    {\n      status: 200,\n      headers: { \"Content-Type\": \"application/json\" },\n    },\n  );\n}\n"],"names":[],"mappings":";;;;;;;;;;AASO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,YAAY,EAAE,GAAG,EAAE,OAAO,EAAE,WAAW,EAAE,MAAM,EAAE,GAAG,QAAQ,GAAG;QAEvE,2BAA2B;QAC3B,IAAI,CAAC,cAAc;YACjB,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;gBACb,MAAM;gBACN,OAAO;YACT,KAAK,MACL;gBACE,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAuB;YACpD;QAEJ;QAEA,2EAA2E;QAC3E,MAAM,SACJ,QAAQ,GAAG,CAAC,aAAa,IACzB,QAAQ,OAAO,CAAC,GAAG,CAAC,kBAAkB,QAAQ,WAAW;QAE3D,IAAI,CAAC,QAAQ;YACX,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;gBACb,MAAM;gBACN,OAAO;YACT,KAAK,MACL;gBACE,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAuB;YACpD;QAEJ;QAEA,2DAA2D;QAC3D,MAAM,WAAW,OAAO,QAAQ,GAAG,CAAC,SAAS;QAC7C,MAAM,eAAe,WAAW,QAAQ,GAAG,CAAC,aAAa;QACzD,MAAM,mBAAmB,eAAe,QAAQ,GAAG,CAAC,iBAAiB;QAErE,IAAI,CAAC,YAAY,CAAC,cAAc;YAC9B,OAAO,IAAI,SACT,KAAK,SAAS,CAAC;gBACb,MAAM;gBACN,OACE;YACJ,KAAK,MACL;gBACE,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAuB;YACpD;QAEJ;QAEA,uBAAuB;QACvB,MAAM,UAAU,QAAQ,GAAG,CAAC,cAAc,IAAI;QAC9C,MAAM,QAAQ,IAAI,MAAM;YAAE;YAAQ;QAAQ;QAE1C,wCAAwC;QACxC,MAAM,WAAW,MAAM,MAAM,MAAM,CAAC,cAAc;YAChD,KAAK;YACL,SAAS;YACT,aAAa;YACb;YACA,QAAQ,UAAU;QACpB;QAEA,yCAAyC;QACzC,MAAM,iBAAkB,UAAU;QAClC,MAAM,cAAc;YAClB,KAAK;YACL,QAAQ;YACR,MAAM;QACR,CAAC,CAAC,eAAe;QAEjB,6CAA6C;QAC7C,qCAAqC;QACrC,OAAO,IAAI,SAAS,SAAS,IAAI,EAAE;YACjC,QAAQ,SAAS,MAAM;YACvB,SAAS;gBACP,gBAAgB;gBAChB,iBAAiB;gBACjB,YAAY;YACd;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,sBAAsB;QAEpC,sCAAsC;QACtC,MAAM,aAAa;YACjB,MAAM;YACN,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAClD;QAEA,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC,cAAc,MAAM;YACrD,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAuB;QACpD;IACF;AACF;AAEO,eAAe;IACpB,OAAO,IAAI,SACT,KAAK,SAAS,CACZ;QACE,SAAS;QACT,aACE;QACF,OAAO;YACL,QAAQ;YACR,MAAM;gBACJ,cAAc;gBACd,KAAK;gBACL,SAAS;gBACT,aAAa;gBACb,QACE;gBACF,aAAa;YACf;YACA,SAAS;gBACP,cAAc;gBACd,KAAK;gBACL,SAAS;gBACT,aAAa;gBACb,QAAQ;gBACR,aAAa;YACf;QACF;QACA,gBAAgB;YACd,SAAS;YACT,SAAS;QACX;QACA,UAAU;YACR,WAAW;YACX,eAAe;YACf,mBAAmB;YACnB,gBAAgB;QAClB;IACF,GACA,MACA,IAEF;QACE,QAAQ;QACR,SAAS;YAAE,gBAAgB;QAAmB;IAChD;AAEJ","debugId":null}}]
}