{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 51, "column": 0}, "map": {"version":3,"file":"sdk.js","sourceRoot":"","sources":["file:///Users/dereklegenzoff/Source/gensx-mono/gensx/packages/gensx-client/src/sdk.ts"],"sourcesContent":["/**\n * GenSX SDK - Core SDK class for interacting with GenSX workflows\n */\n\n// Type declarations for environment variables\ndeclare const process:\n  | {\n      env: Record<string, string | undefined>;\n    }\n  | undefined;\n\n// GenSX Event Types\nexport interface GenSXStartEvent {\n  type: \"start\";\n  workflowExecutionId: string;\n  workflowName: string;\n  id: string;\n  timestamp: string;\n}\n\nexport interface GenSXComponentStartEvent {\n  type: \"component-start\";\n  componentName: string;\n  componentId: string;\n  id: string;\n  timestamp: string;\n}\n\nexport interface GenSXComponentEndEvent {\n  type: \"component-end\";\n  componentName: string;\n  componentId: string;\n  id: string;\n  timestamp: string;\n}\n\nexport interface GenSXProgressEvent {\n  type: \"progress\";\n  data: {\n    type: string;\n  };\n  id: string;\n  timestamp: string;\n}\n\nexport interface GenSXOutputEvent {\n  type: \"output\";\n  content: string;\n  id: string;\n  timestamp: string;\n}\n\nexport interface GenSXEndEvent {\n  type: \"end\";\n  id: string;\n  timestamp: string;\n}\n\nexport interface GenSXErrorEvent {\n  type: \"error\";\n  error?: string;\n  message?: string;\n  id: string;\n  timestamp: string;\n}\n\nexport type GenSXEvent =\n  | GenSXStartEvent\n  | GenSXComponentStartEvent\n  | GenSXComponentEndEvent\n  | GenSXProgressEvent\n  | GenSXOutputEvent\n  | GenSXEndEvent\n  | GenSXErrorEvent;\n\nexport interface GenSXConfig {\n  baseUrl?: string;\n  apiKey?: string;\n  org?: string;\n  project?: string;\n  environment?: string;\n  overrideLocalMode?: boolean; // override for devs to use locally deployed API as opposed to dev server\n}\n\nexport interface RunOptions {\n  inputs?: Record<string, unknown>;\n  stream?: boolean;\n  // Allow overriding client-level config\n  org?: string;\n  project?: string;\n  environment?: string;\n}\n\nexport interface RunRawOptions {\n  inputs?: Record<string, unknown>;\n  format?: \"sse\" | \"ndjson\" | \"json\";\n  // Allow overriding client-level config\n  org?: string;\n  project?: string;\n  environment?: string;\n}\n\nexport interface StartOptions {\n  inputs?: Record<string, unknown>;\n  // Allow overriding client-level config\n  org?: string;\n  project?: string;\n  environment?: string;\n}\n\nexport interface StartResponse {\n  executionId: string;\n  executionStatus: string;\n  data?: unknown;\n}\n\nexport interface GetProgressOptions {\n  executionId: string;\n  format?: \"sse\" | \"ndjson\";\n}\n\nexport interface WorkflowExecution {\n  executionId: string;\n  status: string;\n  progress?: unknown[];\n  result?: unknown;\n  error?: unknown;\n}\n\ntype RunReturn<\n  TOutput,\n  TStream extends boolean | undefined = undefined,\n> = TStream extends true\n  ? {\n      outputStream: AsyncIterable<TOutput>;\n      progressStream: ReadableStream;\n    }\n  : {\n      output: TOutput;\n      progressStream: ReadableStream;\n    };\n\n/**\n * GenSX SDK for interacting with GenSX workflows\n *\n * Usage:\n * ```typescript\n * const gensx = new GenSX({\n *   apiKey: 'your-api-key',\n *   org: 'your-org',\n *   project: 'your-project',\n *   environment: 'production'\n * });\n *\n * // Run a workflow with just inputs\n * const { output } = await gensx.run<string>('workflowName', {\n *   inputs: { userMessage: 'Hello world' }\n * });\n *\n * // Or override org/project for a specific call\n * const { output } = await gensx.run<string>('workflowName', {\n *   inputs: { userMessage: 'Hello world' },\n *   org: 'different-org',\n *   project: 'different-project'\n * });\n * ```\n */\nexport class GenSX {\n  private apiKey?: string;\n  private baseUrl: string;\n  private org?: string;\n  private project?: string;\n  private environment?: string;\n  private isLocal: boolean;\n\n  constructor(config: GenSXConfig) {\n    this.baseUrl = config.baseUrl ?? \"https://api.gensx.com\";\n    this.isLocal =\n      this.baseUrl.includes(\"localhost\") && !config.overrideLocalMode;\n\n    if (!this.isLocal) {\n      // For non-local mode, require apiKey\n      this.apiKey = this.getApiKey(config.apiKey);\n      if (!this.apiKey) {\n        throw new Error(\n          \"apiKey is required. Provide it in the constructor or set the GENSX_API_KEY environment variable.\",\n        );\n      }\n\n      // For non-local mode, require org/project/environment\n      if (!config.org || !config.project || !config.environment) {\n        throw new Error(\n          \"org, project, and environment are required when calling deployed workflows. Provide them in the constructor or method options.\",\n        );\n      }\n    }\n\n    this.org = config.org;\n    this.project = config.project;\n    this.environment = config.environment;\n  }\n\n  /**\n   * Run a workflow with optional streaming\n   * @returns Either { output, progressStream } or { outputStream, progressStream } based on stream flag\n   */\n  async run<TOutput = unknown>(\n    workflowName: string,\n    options: RunOptions = {},\n  ): Promise<RunReturn<TOutput, typeof options.stream>> {\n    const { inputs = {}, stream = false } = options;\n\n    // Use provided values or fall back to client defaults\n    const org = options.org ?? this.org;\n    const project = options.project ?? this.project;\n    const environment = options.environment ?? this.environment;\n\n    const response = await this.runRaw(workflowName, {\n      inputs,\n      org,\n      project,\n      environment,\n    });\n\n    if (!response.body) {\n      throw new Error(\"Response body is null\");\n    }\n\n    if (stream) {\n      // For streaming mode, split and return both streams\n      const { outputStream, progressStream } = this.splitStreams(response);\n\n      // Convert ReadableStream to AsyncIterable\n      const outputIterable = this.createAsyncIterable(outputStream);\n\n      return {\n        outputStream: outputIterable as AsyncIterable<TOutput>,\n        progressStream,\n      };\n    } else {\n      // Parse all events\n      const events: GenSXEvent[] = [];\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      let buffer = \"\";\n\n      try {\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) break;\n\n          buffer += decoder.decode(value, { stream: true });\n          const lines = buffer.split(\"\\n\");\n          buffer = lines.pop() ?? \"\";\n\n          for (const line of lines) {\n            if (!line.trim()) continue;\n            try {\n              events.push(JSON.parse(line) as GenSXEvent);\n            } catch {\n              console.warn(\"Failed to parse event:\", line);\n            }\n          }\n        }\n      } finally {\n        reader.releaseLock();\n      }\n\n      // Process any output event to get the final result\n      let output: TOutput;\n\n      // Aggregate output from output events\n      const outputContents = events\n        .filter(\n          (\n            e,\n          ): e is {\n            type: \"output\";\n            content: string;\n            id: string;\n            timestamp: string;\n          } => e.type === \"output\",\n        )\n        .map((e) => e.content);\n\n      if (outputContents.length === 0) {\n        output = null as TOutput;\n      } else if (typeof outputContents[0] === \"string\") {\n        output = outputContents.join(\"\") as TOutput;\n      } else {\n        output = outputContents as TOutput;\n      }\n\n      // Create progress stream from events\n      const progressStream = new ReadableStream<GenSXEvent>({\n        start(controller) {\n          events.forEach((event) => {\n            if (event.type !== \"output\") {\n              controller.enqueue(event);\n            }\n          });\n          controller.close();\n        },\n      });\n\n      return { output, progressStream };\n    }\n  }\n\n  /**\n   * Run a workflow and return the raw Response object\n   * Provides direct access to the fetch response without any processing\n   *\n   * @param workflowName - Name of the workflow to run\n   * @param options - Options including format: 'sse' | 'ndjson' | 'json'\n   * @returns Raw Response object\n   */\n  async runRaw(\n    workflowName: string,\n    options: RunRawOptions = {},\n  ): Promise<Response> {\n    const { inputs = {}, format = \"ndjson\" } = options;\n\n    // Use provided values or fall back to client defaults\n    const org = options.org ?? this.org;\n    const project = options.project ?? this.project;\n    const environment = options.environment ?? this.environment;\n\n    const url = this.buildWorkflowUrl(workflowName, org, project, environment);\n\n    // Set Accept header based on format\n    const acceptHeader = {\n      sse: \"text/event-stream\",\n      ndjson: \"application/x-ndjson\",\n      json: \"application/json\",\n    }[format];\n\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${this.apiKey}`,\n        \"Content-Type\": \"application/json\",\n        Accept: acceptHeader,\n      },\n      body: JSON.stringify(inputs),\n    });\n\n    if (!response.ok) {\n      throw new Error(\n        `Failed to run workflow: ${response.status} ${response.statusText}`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Start a workflow asynchronously\n   */\n  async start(\n    workflowName: string,\n    options: StartOptions = {},\n  ): Promise<StartResponse> {\n    const { inputs = {} } = options;\n\n    // Use provided values or fall back to client defaults\n    const org = options.org ?? this.org;\n    const project = options.project ?? this.project;\n    const environment = options.environment ?? this.environment;\n\n    const url = this.buildStartUrl(workflowName, org, project, environment);\n\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${this.apiKey}`,\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(inputs),\n    });\n\n    if (!response.ok) {\n      throw new Error(\n        `Failed to start workflow: ${response.status} ${response.statusText}`,\n      );\n    }\n\n    const data = (await response.json()) as {\n      executionId: string;\n      executionStatus?: string;\n      status?: string;\n    };\n    const executionId =\n      response.headers.get(\"X-Execution-Id\") ?? data.executionId;\n\n    return {\n      executionId,\n      executionStatus: data.executionStatus ?? data.status ?? \"started\",\n      data,\n    };\n  }\n\n  /**\n   * Get progress updates for a workflow execution\n   */\n  async getProgress(options: GetProgressOptions): Promise<ReadableStream> {\n    const { executionId, format = \"ndjson\" } = options;\n\n    const url = this.isLocal\n      ? `${this.baseUrl}/workflowExecutions/${executionId}/progress`\n      : `${this.baseUrl}/org/${this.org}/workflowExecutions/${executionId}/progress`;\n\n    const accept =\n      format === \"sse\" ? \"text/event-stream\" : \"application/x-ndjson\";\n\n    const response = await fetch(url, {\n      headers: {\n        Authorization: `Bearer ${this.apiKey}`,\n        Accept: accept,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(\n        `Failed to get progress: ${response.status} ${response.statusText}`,\n      );\n    }\n\n    if (!response.body) {\n      throw new Error(\"Response body is null\");\n    }\n\n    return response.body;\n  }\n\n  // Private helper methods\n  private buildWorkflowUrl(\n    workflowName: string,\n    org?: string,\n    project?: string,\n    environment?: string,\n  ): string {\n    // If baseUrl is localhost, use simplified path structure\n    if (this.isLocal) {\n      return `${this.baseUrl}/workflows/${workflowName}`;\n    }\n\n    // For non-local mode, require all parameters\n    if (!org || !project || !environment) {\n      throw new Error(\n        \"org, project, and environment are required when calling deployed workflows\",\n      );\n    }\n\n    const path = `/org/${org}/projects/${project}/environments/${environment}/workflows/${workflowName}`;\n    return `${this.baseUrl}${path}`;\n  }\n\n  private buildStartUrl(\n    workflowName: string,\n    org?: string,\n    project?: string,\n    environment?: string,\n  ): string {\n    return `${this.buildWorkflowUrl(workflowName, org, project, environment)}/start`;\n  }\n\n  /**\n   * Process NDJSON stream and split into output and progress streams\n   */\n  private async *processStream(\n    response: Response,\n  ): AsyncGenerator<{ output?: string; progress?: GenSXEvent }> {\n    const reader = response.body?.getReader();\n    if (!reader) return;\n\n    const decoder = new TextDecoder();\n    let buffer = \"\";\n\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        buffer += decoder.decode(value, { stream: true });\n        const lines = buffer.split(\"\\n\");\n        buffer = lines.pop() ?? \"\";\n\n        for (const line of lines) {\n          if (!line.trim()) continue;\n\n          try {\n            const event = JSON.parse(line) as GenSXEvent;\n\n            if (event.type === \"output\") {\n              yield { output: event.content };\n            } else {\n              yield { progress: event };\n            }\n          } catch (e) {\n            console.warn(\"Failed to parse NDJSON line:\", e);\n          }\n        }\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  }\n\n  /**\n   * Create separate streams for output and progress events\n   */\n  private splitStreams(response: Response): {\n    outputStream: ReadableStream<string>;\n    progressStream: ReadableStream<GenSXEvent>;\n  } {\n    const processedStream = this.processStream(response);\n\n    // Create transform streams to split the events\n    const outputTransform = new TransformStream<\n      { output?: string; progress?: GenSXEvent },\n      string\n    >({\n      transform(chunk, controller) {\n        if (chunk.output !== undefined) {\n          controller.enqueue(chunk.output);\n        }\n      },\n    });\n\n    const progressTransform = new TransformStream<\n      { output?: string; progress?: GenSXEvent },\n      GenSXEvent\n    >({\n      transform(chunk, controller) {\n        if (chunk.progress !== undefined) {\n          controller.enqueue(chunk.progress);\n        }\n      },\n    });\n\n    // Create readable stream from async generator\n    const sourceStream = new ReadableStream({\n      async start(controller) {\n        try {\n          for await (const item of processedStream) {\n            controller.enqueue(item);\n          }\n          controller.close();\n        } catch (error) {\n          controller.error(error);\n        }\n      },\n    });\n\n    // Pipe through transforms\n    const [stream1, stream2] = sourceStream.tee();\n    const outputStream = stream1.pipeThrough(outputTransform);\n    const progressStream = stream2.pipeThrough(progressTransform);\n\n    return { outputStream, progressStream };\n  }\n\n  /**\n   * Create an async iterable from output stream\n   */\n  private async *createAsyncIterable(\n    stream: ReadableStream<string>,\n  ): AsyncIterable<string> {\n    const reader = stream.getReader();\n\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n        yield value;\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  }\n\n  /**\n   * Helper function to get API key from constructor or environment\n   */\n  private getApiKey(providedKey?: string): string | undefined {\n    if (providedKey) {\n      return providedKey;\n    }\n    try {\n      return typeof process !== \"undefined\"\n        ? process.env.GENSX_API_KEY\n        : undefined;\n    } catch {\n      return undefined;\n    }\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 402, "column": 0}, "map": {"version":3,"file":"index.js","sourceRoot":"","sources":["file:///Users/dereklegenzoff/Source/gensx-mono/gensx/packages/gensx-client/src/index.ts"],"sourcesContent":["/**\n * GenSX SDK - TypeScript SDK for GenSX workflow interactions\n * \n * This SDK provides a clean interface for interacting with GenSX workflows,\n * including both streaming and async execution patterns.\n */\n\n// Main SDK export\nexport { GenSX } from './sdk';\n\n// Type exports\nexport type { \n  GenSXConfig,\n  RunOptions,\n  RunRawOptions,\n  StartOptions,\n  StartResponse,\n  GetProgressOptions,\n  GenSXEvent,\n  GenSXStartEvent,\n  GenSXComponentStartEvent,\n  GenSXComponentEndEvent,\n  GenSXProgressEvent,\n  GenSXOutputEvent,\n  GenSXEndEvent,\n  GenSXErrorEvent,\n} from './sdk';\n\n// Default export\nexport { GenSX as default } from './sdk'; "],"names":[],"mappings":";AAAA;;;;;GAKG;;;;AAEH,kBAAkB;AAClB,IAAA,yBAA8B;AAArB,OAAA,cAAA,CAAA,SAAA,SAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA,MAAA,KAAK;IAAA;AAAA,GAAA;AAoBd,iBAAiB;AACjB,IAAA,yBAAyC;AAAhC,OAAA,cAAA,CAAA,SAAA,WAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA,MAAA,KAAK;IAAA;AAAA,GAAW","debugId":null}},
    {"offset": {"line": 434, "column": 0}, "map": {"version":3,"sources":["file:///Users/dereklegenzoff/Source/gensx-mono/gensx/examples/draft-pad/app/api/gensx/route.ts"],"sourcesContent":["import { GenSX } from \"@gensx/client\";\nimport { NextRequest } from \"next/server\";\n\ninterface RequestBody {\n  workflowName: string;\n  org?: string;\n  project?: string;\n  environment?: string;\n  format?: \"sse\" | \"ndjson\" | \"json\";\n  [key: string]: unknown; // For additional inputs\n}\n\nconst shouldUseLocalDevServer = () => {\n  if (\n    process.env.GENSX_BASE_URL &&\n    !process.env.GENSX_BASE_URL.includes(\"localhost\")\n  ) {\n    return false;\n  }\n  if (process.env.NODE_ENV === \"production\" || process.env.VERCEL_ENV) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * API route that acts as a pure passthrough to GenSX\n * Accepts the same parameters as the GenSX SDK\n *\n * This is designed to work with the useGenSX hook\n */\nexport async function POST(request: NextRequest) {\n  try {\n    const body = (await request.json()) as RequestBody;\n    const { workflowName, org, project, environment, format, ...inputs } = body;\n\n    const useLocalDevServer = shouldUseLocalDevServer();\n\n    // Validate required fields\n    if (!workflowName) {\n      return new Response(\n        JSON.stringify({\n          type: \"error\",\n          error: \"workflowName is required\",\n        }) + \"\\n\",\n        {\n          status: 400,\n          headers: { \"Content-Type\": \"application/x-ndjson\" },\n        },\n      );\n    }\n\n    // Get API key from environment (or could accept from Authorization header)\n    let gensx: GenSX;\n    if (!useLocalDevServer) {\n      const apiKey =\n        process.env.GENSX_API_KEY ??\n        request.headers.get(\"Authorization\")?.replace(\"Bearer \", \"\");\n\n      if (!apiKey) {\n        return new Response(\n          JSON.stringify({\n            type: \"error\",\n            error: \"API key not configured\",\n          }) + \"\\n\",\n          {\n            status: 401,\n            headers: { \"Content-Type\": \"application/x-ndjson\" },\n          },\n        );\n      }\n\n      // Use defaults from environment if not provided in request\n      const finalOrg = org ?? process.env.GENSX_ORG;\n      const finalProject = project ?? process.env.GENSX_PROJECT;\n      const finalEnvironment = environment ?? process.env.GENSX_ENVIRONMENT;\n\n      if (!finalOrg || !finalProject || !finalEnvironment) {\n        return new Response(\n          JSON.stringify({\n            type: \"error\",\n            error:\n              \"org, project, and environment are required (either in request or environment)\",\n          }) + \"\\n\",\n          {\n            status: 400,\n            headers: { \"Content-Type\": \"application/x-ndjson\" },\n          },\n        );\n      }\n\n      // Initialize GenSX SDK\n      const baseUrl = process.env.GENSX_BASE_URL ?? \"https://api.gensx.com\";\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call\n      gensx = new GenSX({\n        apiKey,\n        baseUrl,\n        org: finalOrg,\n        project: finalProject,\n        environment: finalEnvironment,\n      });\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call\n      gensx = new GenSX({\n        baseUrl: process.env.GENSX_BASE_URL ?? \"http://localhost:1337\",\n      });\n    }\n\n    // Use runRaw to get the direct response\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-call, @typescript-eslint/no-unsafe-member-access\n    const response = await gensx.runRaw(workflowName, {\n      inputs,\n      format: format ?? \"ndjson\", // Default to ndjson if not specified\n    });\n\n    // Determine content type based on format\n    const responseFormat = format ?? \"ndjson\";\n    const contentType = {\n      sse: \"text/event-stream\",\n      ndjson: \"application/x-ndjson\",\n      json: \"application/json\",\n    }[responseFormat];\n\n    // Return the response directly to the client\n    // This preserves the response format\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument\n    return new Response(response.body, {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n      status: response.status,\n      headers: {\n        \"Content-Type\": contentType,\n        \"Cache-Control\": \"no-cache\",\n        Connection: \"keep-alive\",\n      },\n    });\n  } catch (error) {\n    console.error(\"GenSX proxy error:\", error);\n\n    // Return error as a GenSX error event\n    const errorEvent = {\n      type: \"error\",\n      error: error instanceof Error ? error.message : \"Internal server error\",\n    };\n\n    return new Response(JSON.stringify(errorEvent) + \"\\n\", {\n      status: 500,\n      headers: { \"Content-Type\": \"application/x-ndjson\" },\n    });\n  }\n}\n\nexport function GET() {\n  return new Response(\n    JSON.stringify(\n      {\n        message: \"GenSX Passthrough API\",\n        description:\n          \"This endpoint accepts the same parameters as the GenSX SDK and passes them through\",\n        usage: {\n          method: \"POST\",\n          body: {\n            workflowName: \"Name of the GenSX workflow to run (required)\",\n            org: \"Organization name (optional if set in environment)\",\n            project: \"Project name (optional if set in environment)\",\n            environment: \"Environment name (optional)\",\n            format:\n              'Response format: \"sse\" | \"ndjson\" | \"json\" (optional, defaults to \"ndjson\")',\n            \"...inputs\": \"Any other fields are passed as workflow inputs\",\n          },\n          example: {\n            workflowName: \"ChatWorkflow\",\n            org: \"my-org\",\n            project: \"my-project\",\n            environment: \"production\",\n            format: \"ndjson\",\n            userMessage: \"Hello, how can you help me?\",\n          },\n        },\n        authentication: {\n          option1: \"Set GENSX_API_KEY environment variable\",\n          option2: \"Pass Authorization header with Bearer token\",\n        },\n        defaults: {\n          GENSX_ORG: \"Default organization if not provided in request\",\n          GENSX_PROJECT: \"Default project if not provided in request\",\n          GENSX_ENVIRONMENT: \"Default environment if not provided in request\",\n          GENSX_BASE_URL: \"GenSX base URL (defaults to https://api.gensx.com)\",\n        },\n      },\n      null,\n      2,\n    ),\n    {\n      status: 200,\n      headers: { \"Content-Type\": \"application/json\" },\n    },\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}