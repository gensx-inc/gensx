name: "🎁 Release CLI Binary"

on:
  workflow_dispatch:
    inputs:
      version:
        description: "The version of the CLI to release (defaults to current version in package.json)"
        required: false
        default: ""

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Get Version
        id: get-version
        run: |
          if [ -z "${{ inputs.version }}" ]; then
            VERSION=$(node -p "require('./packages/gensx/package.json').version")
          else
            VERSION=${{ inputs.version }}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  build-cli-binary:
    needs: get-version
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [win, linux, macos-x64, macos-arm64]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Deno ⚙️
        uses: denoland/setup-deno@v1
        with:
          deno-version: v2.x

      - name: Setup Node ⚙️
        uses: ./.github/actions/setup-node

      - name: Build 📦
        run: pnpm build

      - name: Build Binary 🏗️
        run: |
          cd packages/gensx-cli
          deno task compile:${{ matrix.target }}

      - name: Prepare Archive (Unix)
        if: ${{ !contains(matrix.target, 'win') }}
        run: |
          cd packages/gensx-cli
          tar czf gensx-${{ matrix.target }}.tar.gz gensx-cli-${{ matrix.target }}
          cp gensx-${{ matrix.target }}.tar.gz gensx_${{ needs.get-version.outputs.version }}_${{ matrix.target }}.tar.gz

      - name: Prepare Archive (Windows)
        if: matrix.target == 'win'
        run: |
          cd packages/gensx-cli
          zip gensx-windows.zip gensx-cli-windows.exe
          cp gensx-windows.zip gensx_${{ needs.get-version.outputs.version }}_windows.zip

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2.0.8
        with:
          tag_name: gensx-cli-binary-v${{ needs.get-version.outputs.version }}
          token: ${{ secrets.PAT_GITHUB_TOKEN }}
          files: |
            packages/gensx-cli/gensx_${{ needs.get-version.outputs.version }}_${{ matrix.target }}.*

  update-homebrew:
    needs: [get-version, build-cli-binary]
    runs-on: ubuntu-latest
    steps:
      - name: Download macOS ARM64 Release
        uses: dsaltares/fetch-gh-release-asset@1.1.1
        with:
          version: tags/gensx-cli-binary-v${{ needs.get-version.outputs.version }}
          file: gensx_${{ needs.get-version.outputs.version }}_macos-arm64.tar.gz
          token: ${{ secrets.PAT_GITHUB_TOKEN }}

      - name: Download macOS x64 Release
        uses: dsaltares/fetch-gh-release-asset@1.1.1
        with:
          version: tags/gensx-cli-binary-v${{ needs.get-version.outputs.version }}
          file: gensx_${{ needs.get-version.outputs.version }}_macos-x64.tar.gz
          token: ${{ secrets.PAT_GITHUB_TOKEN }}

      - name: Calculate SHA256 Checksums
        run: |
          echo "ARM64_SHA256=$(sha256sum gensx_${{ needs.get-version.outputs.version }}_macos-arm64.tar.gz | cut -d ' ' -f 1)" >> $GITHUB_ENV
          echo "X64_SHA256=$(sha256sum gensx_${{ needs.get-version.outputs.version }}_macos-x64.tar.gz | cut -d ' ' -f 1)" >> $GITHUB_ENV

      - name: Checkout homebrew-gensx repo
        uses: actions/checkout@v4
        with:
          repository: gensx-inc/homebrew-gensx
          token: ${{ secrets.PAT_GITHUB_TOKEN }}
          path: homebrew-gensx

      - name: Update Formula
        run: |
          cat > homebrew-gensx/Formula/gensx.rb << EOL
          class Gensx < Formula
            desc "GenSX CLI - The command-line interface for GenSX"
            homepage "https://gensx.com"
            version "${{ needs.get-version.outputs.version }}"
            license "MIT"

            on_macos do
              on_arm do
                url "https://github.com/gensx-inc/gensx/releases/download/gensx-cli-binary-v${{ needs.get-version.outputs.version }}/gensx_${{ needs.get-version.outputs.version }}_macos-arm64.tar.gz"
                sha256 "${{ env.ARM64_SHA256 }}"
              end
              on_intel do
                url "https://github.com/gensx-inc/gensx/releases/download/gensx-cli-binary-v${{ needs.get-version.outputs.version }}/gensx_${{ needs.get-version.outputs.version }}_macos-x64.tar.gz"
                sha256 "${{ env.X64_SHA256 }}"
              end
            end

            def install
              binary_name = Hardware::CPU.arm? ? "gensx-cli-macos-arm64" : "gensx-cli-macos-x64"
              bin.install binary_name => "gensx"
              chmod 0755, bin/"gensx"
            end
          end
          EOL

      - name: Commit and Push Changes
        run: |
          cd homebrew-gensx
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add Formula/gensx.rb
          git commit -m "Update formula to version ${{ needs.get-version.outputs.version }}"
          git push
