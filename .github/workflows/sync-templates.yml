name: "üõÅ Sync Templates"

# Add permissions for the workflow
permissions:
  contents: write
  actions: read

on:
  push:
    branches: [main]
    paths: ["examples/deep-research/**"] # re‚Äësplit only when examples change
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - ".github/workflows/sync-templates.yml" # run only when you tweak this file
jobs:
  split:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        path: [deep-research] # enumerate your folders
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Verify Token Access
        run: |
          echo "Checking TEMPLATE_SYNC_TOKEN access to target repository..."
          ex=${{ matrix.path }}

          # Test token access to target repository
          response=$(curl -s -w "%{http_code}" -o /dev/null \
            -H "Authorization: token ${{ secrets.TEMPLATE_SYNC_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/gensx-inc/$ex-template")

          if [ "$response" = "200" ]; then
            echo "‚úÖ Token has access to gensx-inc/$ex-template"
          else
            echo "‚ùå Token access failed with HTTP $response"
            echo "This suggests the token is expired, lacks permissions, or the repository doesn't exist"
            exit 1
          fi

          # Check token scopes and permissions
          echo "Checking token scopes..."
          scopes=$(curl -s \
            -H "Authorization: token ${{ secrets.TEMPLATE_SYNC_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -I "https://api.github.com/user" | grep -i "x-oauth-scopes" | cut -d' ' -f2- | tr -d '\r')

          echo "Token scopes: $scopes"

          if echo "$scopes" | grep -q "repo\|public_repo"; then
            echo "‚úÖ Token has repository write permissions"
          else
            echo "‚ùå Token missing repository write permissions"
            echo "Required scopes: 'repo' (for private repos) or 'public_repo' (for public repos)"
            exit 1
          fi

      - name: Split & push
        run: |
          ex=${{ matrix.path }}
          echo "Processing example: $ex"

          # Configure git with token authentication
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Alternative: Configure git to use token for all GitHub operations
          git config --global url."https://x-access-token:${{ secrets.TEMPLATE_SYNC_TOKEN }}@github.com/".insteadOf "https://github.com/"

          # Delete existing split branch if it exists
          echo "Cleaning up existing split branch..."
          git branch -D split/$ex || true

          # Create new split branch
          echo "Creating split branch for examples/$ex..."
          git subtree split -P examples/$ex -b split/$ex

          # Method 1: Try direct push with token
          echo "Pushing to gensx-inc/$ex-template..."
          if git push --force https://x-access-token:${{ secrets.TEMPLATE_SYNC_TOKEN }}@github.com/gensx-inc/$ex-template split/$ex:main; then
            echo "‚úÖ Successfully pushed to gensx-inc/$ex-template"
          else
            echo "‚ùå Direct push failed, trying alternative method..."

            # Method 2: Try with remote configuration
            git remote add template-repo https://github.com/gensx-inc/$ex-template.git
            if git push --force template-repo split/$ex:main; then
              echo "‚úÖ Successfully pushed via configured remote"
            else
              echo "‚ùå Push failed. Possible causes:"
              echo "1. TEMPLATE_SYNC_TOKEN lacks 'Contents: Write' permission"
              echo "2. Token is not a classic Personal Access Token with 'repo' scope"
              echo "3. Target repository has branch protection rules"
              echo "4. Token was created for wrong organization/user"
              exit 1
            fi
          fi
