---
description: How to use the gensx package
globs:
alwaysApply: true
---
# GenSX Syntax Quick Reference

GenSX is a TypeScript framework used to build and orchestrate LLM workflows. This reference focuses on syntax for:

- **Components & Workflows**
- **Integrations with OpenAI, Anthropic, Vercel AI SDK**

---

## 1. Components

### Defining a Basic Component

Use `gensx.Component` to create a reusable component. The component accepts typed props and returns an output (synchronously or asynchronously).

```tsx
import * as gensx from "@gensx/core";
import { openai } from "@ai-sdk/openai";
import { generateText } from "@gensx/vercel-ai";

interface GreetingInput {
  name: string;
  formal?: boolean;
}

const Greeting = gensx.Component(
  "Greeting",
  async ({ name, formatOutput = false, formal = false }: GreetingInput) => {
    const result = await generateText({
      model: openai("gpt-4.1-mini"),
      messages: [
        {
          role: "system",
          content:
            "You are a friendly assistant that creates personalized greetings. You can adjust your tone based on whether the greeting should be formal or informal.",
        },
        {
          role: "user",
          content: `Create a ${formal ? "formal" : "casual"} greeting for ${name}. Keep it concise and ${formal ? "professional" : "warm"}.`,
        },
      ],
    });
    return result.text;
  },
);
```


To run a component, you just call it like a function:

```typescript
const greeting = await Greeting({ name: "John", formal: true });
```

---

## 2. Workflows

A workflow is a runnable component tree. Define a workflow with `gensx.Workflow` and run it just like you'd run any function.

```typescript
// Main workflow that combines components
const WelcomeWorkflow = gensx.Workflow(
  "WelcomeWorkflow",
  async ({ name }: GreetingInput) => {
    // Determine if we should use formal greeting based on time of day
    const hour = new Date().getHours();
    const isFormal = hour >= 9 && hour <= 17;

    const greeting = await Greeting({
      name,
      formal: isFormal,
    });

    return {
      greeting,
      isFormal,
      timestamp: new Date().toISOString(),
    };
  },
);

export { WelcomeWorkflow };
```

Similar to components, workflows are run just like a function. All workflows need to be exported from the workflows.ts file so that they can be deployed.

---

## 3. LLM Providers

In addition to the Vercel AI SDK, GenSX has build in support for the OpenAI SDK, and the Anthropic SDK.

### OpenAI

By default, you should import `OpenAI` from `@gensx/openai` and use it like this:

```typescript
import { OpenAI } from "@gensx/openai";

const openai = new OpenAI();
```

However, you can also import the `openai` library directly and import `wrapOpenAI` from `@gensx/openai` to wrap it in a GenSX provider.

```typescript
import { OpenAI } from "openai";
import { wrapOpenAI } from "@gensx/openai";

const openai = wrapOpenAI(new OpenAI());
```

### Anthropic

Both options are also available for Anthropic.

```typescript
import { Anthropic } from "@gensx/anthropic";

const anthropic = new Anthropic();
```

```typescript
import { Anthropic } from "anthropic";
import { wrapAnthropic } from "@gensx/anthropic";

const anthropic = wrapAnthropic(new Anthropic());
```

## Summary

- **Components:** Define components using `gensx.Component("Name", fn)`
- **Workflows:** Create with `gensx.Workflow("Name", fn )` and execute like you would any function
- **Integrations:**
@file ./gensx-openai.mdc
- Use the OpenAI SDK with GenSX
@file ./gensx-anthropic.mdc
- Use the Anthropic SDK with GenSX
@file ./gensx-ai-sdk.mdc
- Use the Vercel AI SDK with GenSX
